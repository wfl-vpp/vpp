---
- name: Setting up OpenVPN Server
  tags:
    - setup_foreign_server
    - setup_foreign_side
    - ubuntu_22_04
  block:
    - name: Setup openvpn on ubuntu server
      debug:
        msg: "OpenVPN on ubuntu: {{ inventory_hostname }}"
    
    - name: Creating the target working directory
      file:
        path: "{{ ovpn_root }}"
        state: directory
    
    - name: Disabling and removing auto-update
      apt:
        name: "unattended-upgrades"
        state: absent
        update_cache: true
    
    - name: Installing openvpn on the host
      ansible.builtin.apt:
        name: "{{ openvpn_ubuntu_package_name }}"
        state: latest
        update_cache: yes

    - name: Installing stunnel on the host
      ansible.builtin.apt:
        name: "{{ stunnel_package_name }}"
        state: latest
        update_cache: yes
      when: setup_stunnel | bool
    
    - name: Make sure the default service is disabled and stopped
      ignore_errors: yes
      systemd:
        name: "{{ item }}"
        state: stopped
        enabled: false
      loop:
        - openvpn
        - openvpn-iptables
        - openvpn-foreign
        - stunnel
        - stunnel4

    - name: Check if the secret file already exists on ansible host
      stat:
        path: "/tmp/.secret_{{ peer | ipaddr('address') }}"
      register: secret_file_state
      delegate_to: localhost
    
    - name: If secret file does not exist on ansible host create it on foreign server
      block:
 
      - name: Generating Secret
        command: /usr/sbin/openvpn --genkey secret {{ secret_path }}
      
      - name: Get the secret from foreign server
        fetch:
          src: "{{ secret_path }}"
          dest: "/tmp/.secret_{{ peer | ipaddr('address') }}"
          flat: yes
      when: not secret_file_state.stat.exists

    - name: If the secret file exists on the ansible host upload it to foreign server
      copy:
        src: "/tmp/.secret_{{ peer | ipaddr('address') }}"
        dest: "{{ secret_path }}"
      when: secret_file_state.stat.exists
    
    - name: Template systemd service file
      template:
        src: "etc/systemd/system/openvpn-foreign.service"
        dest: "/etc/systemd/system/openvpn-foreign.service"
    
    - name: Enabling ip_forward in sysctl and /proc
      sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        sysctl_set: yes
        state: present
        reload: yes
    
    - name: Template the iptables rules service file
      template:
        src: "etc/systemd/system/openvpn-iptables.service"
        dest: "/etc/systemd/system/openvpn-iptables.service"

    - name: Configure Stunnel if setup_stunnel is set
      block:

      - name: Make sure stunnel directory exists under etc
        file:
          path: "/etc/stunnel"
          state: "directory"
      
      - name: Generate the required cert and key
        shell: openssl req -x509 -newkey rsa:4096 -keyout {{ stunnel_key_file_path }} -out {{ stunnel_cert_file_path }} -sha256 -days {{ stunnel_cert_validity_days }} -nodes -subj "/C={{ stunnel_C }}/ST={{ stunnel_ST }}/L={{ stunnel_L}}/O={{ stunnel_O }}/OU={{ stunnel_OU }}/CN={{ stunnel_CN }}"

      - name: Template the stunnel config file
        template:
          src: "etc/stunnel/stunnel-ovpn.conf"
          dest: "/etc/stunnel/stunnel-ovpn.conf"

      - name: Template the stunnel service file
        template:
          src: "etc/systemd/system/ovpn-stunnel.service"
          dest: "/etc/systemd/system/ovpn-stunnel.service"

      - name: Reload systemd
        systemd:
          daemon-reload: yes
  
      - name: Start Stunnel server
        systemd:
          name: "ovpn-stunnel.service"
          state: started
          enabled: yes

      when: setup_stunnel | bool
      
    - name: Enable and start OpenVPN iptables service
      systemd:
        name: "openvpn-iptables"
        state: started
        enabled: yes
    
    - name: Systemd daemon-reload
      systemd:
        daemon_reload: yes
    
    - name: Enable and start openvpn-foreign service
      systemd:
        name: openvpn-foreign
        state: started
        enabled: yes
    
    - name: Template routecheck service files
      template:
        src: "etc/systemd/system/{{ item }}"
        dest: "/etc/systemd/system/{{ item }}"
      loop:
        - "openvpn-routecheck.service"
        - "openvpn-routecheck.timer"
    
    - name: Systemd daemon-reload
      systemd:
        daemon_reload: yes

    - name: Setup systemd-resolved to listen on tun interface
      template:
        src: "etc/systemd/resolved.conf"
        dest: "/etc/systemd/resolved.conf"

    - name: Restart systemd-resolved
      systemd:
        name: systemd-resolved.service
        state: restarted
        enabled: yes
    
    - name: Enable routecheck timer
      systemd:
        name: openvpn-routecheck.timer
        state: started
        enabled: yes
    
    - name: Template logrotate config
      template:
        src: "etc/logrotate.d/ovpn"
        dest: "/etc/logrotate.d/ovpn"
    
