---
- name: Setup OpenVPN client
  tags:
    - setup_ir_side
    - setup_irclient
    - ubuntu_22_04
  block:

    - name: Change resolv conf file
      lineinfile:
        line: "nameserver 4.2.2.2"
        path: "/etc/resolv.conf"
        create: true
        state: present

    - name: Get own fqdn
      command: "hostname --fqdn"
      register: my_fqdn
    
    - name: Normal setup fresh start
      when: only_switch_fs|bool == false
      block:
        - name: Setup openvpn on ubuntu server
          debug:
            msg: "Installing OpenVPN on {{ inventory_hostname }}"
        
        - name: Disabling and removing auto-update
          apt:
            name: "unattended-upgrades"
            state: absent
        
        - name: Update apt
          apt:
            update_cache: true
        
        - name: Installing the required packages
          apt:
            name: "{{ item }}"
            state: present
          loop: "{{ required_packages }}"
        
        - name: Creating the target working directories
          file:
            path: "{{ item }}"
            state: directory
          loop:
            - "{{ ovpn_root }}"
            - "/run/openvpn_irclient"

        - name: Template the tmpfiles config
          template:
            src: "etc/tmpfiles.d/openvpn_irclient.conf"
            dest: "/etc/tmpfiles.d/openvpn_irclient.conf"
        
        - name: Running the whole proxy setup for openvpn apt repo
          when: setup_apt_proxy|bool == true
          block:
            - name: Running on the local host
              delegate_to: 127.0.0.1
              block:
              - name: Templating the script locally
                template:
                  src: "tmp/ssh_socks_openvpn.sh"
                  dest: "/tmp/ssh_socks_openvpn.sh"
                  mode: '0755'
              
              - name: Run proxy script
                shell: "/tmp/ssh_socks_openvpn.sh"
                register: command_stat
              
              - name: Removing the local proxy script
                file:
                  path: "/tmp/ssh_socks_openvpn.sh"
                  state: absent
            
            - name: Copy apt config to the host
              template:
                src: "etc/apt/apt.conf.d/80proxy.conf"
                dest: "/etc/apt/apt.conf.d/80proxy.conf"
            
            - name: Adding openvpn http repo to the host and updating cache
              apt_repository:
                repo: "deb [trusted=yes] {{ openvpn_ubuntu_repo_addr }} {{ ansible_distribution_release }} main"
                state: present
                filename: openvpn
                update_cache: yes
            
        - name: Installing openvpn on the host
          apt:
            name: "{{ openvpn_ubuntu_package_name }}"
            state: latest
            update_cache: yes
        
        - name: Make sure the default service is disabled and stopped
          ignore_errors: yes
          systemd:
            name: "{{ item }}"
            state: stopped
            enabled: false
          loop:
            - openvpn
            - openvpn-irclient
            - stunnel
            - stunnel4
            - stunnel-ovpn


        - name: Create the Secret file if it does not exist
          block:

            - name: Check if the secret file already exists on the server
              stat:
                path: "{{ secret_path }}"
              register: secret_file_status

            - name: If the secret file does not exist on the server
              block:

              - name: Generating Secret
                command: /usr/sbin/openvpn --genkey secret {{ secret_path }}

              - name: Fetch the secret from server
                fetch:
                  src: "{{ secret_path }}"
                  dest: "/tmp/.secret_{{ inventory_hostname | ipaddr('address') }}"
                  flat: yes
                    
              when: not secret_file_status.stat.exists

            - name: If the secret file exists on the server fetch it to ansible host
              fetch:
                src: "{{ secret_path }}"
                dest: "/tmp/.secret_{{ inventory_hostname | ipaddr('address') }}"
                flat: yes
              when: secret_file_status.stat.exists
        
        - name: Template Openvpn-client service
          template:
            src: "etc/systemd/system/openvpn-irclient.service"
            dest: "/etc/systemd/system/openvpn-irclient.service"
        
        - name: Systemd daemon reload
          systemd:
            daemon-reload: yes
        
        - name: Enabling ip_forward in sysctl and proc
          sysctl:
            name: net.ipv4.ip_forward
            value: '1'
            sysctl_set: yes
            state: present
            reload: yes

        - name: Stop and disable systemd-resolved
          systemd:
            name: systemd-resolved
            state: stopped
            enabled: false

        - name: Template the DNS configs
          template:
            src: "etc/resolv.conf"
            dest: "/etc/resolv.conf"

        - name: Stunnel specific setup
          block:

            - name: Make sure stunnel directory exists under etc
              file:
                path: "/etc/stunnel"
                state: "directory"

            - name: Generate the required cert and key
              shell: openssl req -x509 -newkey rsa:4096 -keyout {{ stunnel_key_file_path }} -out {{ stunnel_cert_file_path }} -sha256 -days {{ stunnel_cert_validity_days }} -nodes -subj "/C={{ stunnel_C }}/ST={{ stunnel_ST }}/L={{ stunnel_L}}/O={{ stunnel_O }}/OU={{ stunnel_OU }}/CN={{ my_fqdn.stdout }}"

            - name: Copy the stunnel cert file to ansible host
              fetch:
                src: "{{ stunnel_cert_file_path }}"
                dest: "/tmp/.stunnel_cert_{{ inventory_hostname }}.crt"
                flat: yes

            - name: Template the stunnel config file
              template:
                src: "etc/stunnel/stunnel-ovpn-server.conf"
                dest: "/etc/stunnel/stunnel-ovpn-server.conf"

            - name: Template the stunnel service file
              template:
                src: "etc/systemd/system/stunnel-ovpn-server.service"
                dest: "/etc/systemd/system/stunnel-ovpn-server.service"

            - name: Reload systemd
              systemd:
                daemon-reload: yes

            - name: Start stunnel server
              systemd:
                name: "stunnel-ovpn-server.service"
                state: started
                enabled: yes

            
          when: setup_stunnel|bool == true

        - name: Start the client service on iran server
          systemd:
            name: openvpn-irclient
            state: started
            enabled: yes

        - name: Only if there are multiple peers and stunnel is disabled
          block:
            - name: Create text file with peers list
              copy:
                dest: "{{ ovpn_root }}/peers"
                content: "{{ peers | join('\n') }}"

            - name: Template the peer_rotate script
              template:
                src: "opt/ovpn/peer_rotate.sh"
                dest: "{{ ovpn_root }}/peer_rotate.sh"
                mode: '0755'

            - name: Template the peer_rotate service and timer
              template:
                src: "{{ item }}"
                dest: "/{{ item }}"
              loop:
                - "etc/systemd/system/ovpn_peer_rotate.service"
                - "etc/systemd/system/ovpn_peer_rotate.timer"

          when: 
            - peers | length > 1
            - setup_stunnel | bool == false

        - name: Only if there are multiple peers and stunnel is Enabled
          block:
            - name: Create text file with peers list
              copy:
                dest: "{{ ovpn_root }}/peers"
                content: "{{ peers | join('\n') }}"

            - name: Template the peer_rotate_stunnel script
              template:
                src: "opt/ovpn/peer_rotate_stunnel.sh"
                dest: "{{ ovpn_root }}/peer_rotate_stunnel.sh"
                mode: '0755'

            - name: Template the peer_rotate_stunnel service and timer
              template:
                src: "{{ item }}"
                dest: "/{{ item }}"
              loop:
                - "etc/systemd/system/ovpn_peer_rotate_stunnel.service"
                - "etc/systemd/system/ovpn_peer_rotate_stunnel.timer"

          when:
            - peers | length > 1
            - setup_stunnel | bool == true

    
    - name: Only updating the FS related parts
      when: only_switch_fs|bool == true
      block:
        
        - name: Template Openvpn-client service
          template:
            src: "etc/systemd/system/openvpn-irclient.service"
            dest: "/etc/systemd/system/openvpn-irclient.service"
          when: setup_stunnel|bool == false

        - name: Template the stunnel config
          template:
            src: "etc/stunnel/stunnel-ovpn-server.conf"
            dest: "/etc/stunnel/stunnel-ovpn-server.conf"
          when: setup_stunnel|bool == true
        
        - name: Systemd daemon reload
          systemd:
            daemon-reload: yes
  
        - name: Restart OpenVPN client service
          systemd:
            name: openvpn-irclient
            state: restarted
            enabled: yes

